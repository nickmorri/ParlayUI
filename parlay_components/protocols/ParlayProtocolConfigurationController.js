(function () {
    "use strict";

    var module_dependencies = ["parlay.protocols.manager", "ngMaterial", "ngMessages", "ngMdIcons", "templates-main"];

    angular
        .module("parlay.protocols.configuration_controller", module_dependencies)
        .controller("ParlayProtocolConfigurationController", ParlayProtocolConfigurationController);

    ParlayProtocolConfigurationController.$inject = ["$scope", "$mdDialog", "$mdMedia", "ParlayProtocolManager"];
    function ParlayProtocolConfigurationController ($scope, $mdDialog, $mdMedia, ParlayProtocolManager) {

        var ctrl = this;

        ctrl.selected_protocol = null;

        ctrl.connecting = false;
        ctrl.error = false;

        ctrl.filterProtocols = filterProtocols;
        ctrl.filterDefaults = filterDefaults;
        ctrl.selectedProtocolHasParameters = selectedProtocolHasParameters;
        ctrl.isContainer = isContainer;
        ctrl.cancel = $mdDialog.cancel;
        ctrl.connect = connect;

        // Attach reference to $mdMedia to scope so that media queries can be done.
        $scope.$mdMedia = $mdMedia;

        /**
         * Returns protocols that pass the filterFunction generated by the query string.
         * @param {String} query - name of potential protocol.
         * @returns {Array} filtered protocols.
         */
        function filterProtocols (query) {
            var lowercase_query = angular.lowercase(query);
            var protocols = angular.copy(ParlayProtocolManager.getAvailableProtocols());

            return query ? protocols.filter(function(protocol) {
                return angular.lowercase(protocol.name).indexOf(lowercase_query) > -1;
            }) : protocols;
        }

        /**
         * Returns default options that pass the filterFunction generated by the query string.
         * @param {Array} defaults - Array of possible default values.
         * @param {String} query - name of potential default.
         * @returns {Array} filtered default.
         */
        function filterDefaults (defaults, query) {
            var lowercaseQuery = angular.lowercase(query);
            return query ? defaults.filter(function(default_string) {
                return angular.lowercase(default_string).indexOf(lowercaseQuery) > -1;
            }) : defaults;
        }

        /**
         * Checks if selected protocol has any configuration parameters.
         * @returns {Boolean} True if it has any parameters, false otherwise
         */
        function selectedProtocolHasParameters () {
            return ctrl.selected_protocol !== null && ctrl.selected_protocol !== undefined && Object.keys(ctrl.selected_protocol.parameters).length > 0;
        }

        /**
         * Checks if the given item is a container type object.
         * @param {Object} item - Given item.
         * @returns {Boolean} - True if container, false otherwise.
         */
         function isContainer (item) {
            return item !== null && item !== undefined && !angular.isString(item) && angular.isNumber(item.length);
        }

        /**
         * Resolves the $mdDialog promise with the a configured ctrl.selected_protocol.
         * @returns {$q.defer.promise} Resolves the $mdDialog promise with the a configured $scope.selected_protocol.
         */
        function connect () {
            ctrl.connecting = true;

            var protocol_name = ctrl.selected_protocol.name;
            var protocol_parameters = Object.keys(ctrl.selected_protocol.parameters).reduce(function (accumulator, key) {
                accumulator[key] = ctrl.selected_protocol.parameters[key].value ||
                    ctrl.selected_protocol.parameters[key].search_text;;
                return accumulator;
            }, {});

            ParlayProtocolManager.openProtocol({
                name: protocol_name,
                parameters: protocol_parameters
            }).then(function (response) {
                $mdDialog.hide(response);
                return response;
            }).catch(function (response) {
                ctrl.connecting = false;
                ctrl.error = true;
                ctrl.error_message = response;
                return response;
            });
        }

    }

}());