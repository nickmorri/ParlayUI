function ParlayProtocolConfigurationController($mdDialog, ParlayProtocolManager) {
    
    this.selected_protocol = null;
    
    this.connecting = false;
    this.error = false;
    
    /**
     * Returns protocols that pass the filterFunction generated by the query string.
     * @param {String} query - name of potential protocol.
     * @returns {Array} filtered protocols.
     */
    this.filterProtocols = function (query) {
        var lowercaseQuery = angular.lowercase(query);
        var protocols = angular.copy(ParlayProtocolManager.getAvailableProtocols());
        
        return query ? protocols.filter(function(protocol) {
            return angular.lowercase(protocol.name).indexOf(lowercaseQuery) > -1;
        }) : protocols;
    };
    
    /**
     * Returns default options that pass the filterFunction generated by the query string.
     * @param {Array} defaults - Array of possible default values.
     * @param {String} query - name of potential default.
     * @returns {Array} filtered default.
     */
    this.filterDefaults = function (defaults, query) {
        var lowercaseQuery = angular.lowercase(query);
        return query ? defaults.filter(function(default_string) {
            return angular.lowercase(default_string).indexOf(lowercaseQuery) > -1;
        }) : defaults;
    };
    
    /**
     * Checks if selected protocol has any configuration parameters.
     * @returns {Boolean} True if it has any parameters, false otherwise
     */
    this.selectedProtocolHasParameters = function () {
        return this.selected_protocol !== null && this.selected_protocol !== undefined && Object.keys(this.selected_protocol.parameters).length > 0;
    };
    
    /**
	 * Checks if the given item is a container type object.
	 * @param {Object} item - Given item.
	 * @returns {Boolean} - True if container, false otherwise.
	 */
    this.isContainer = function (item) {
	    return item !== null && !angular.isString(item) && angular.isNumber(item.length);
    };
    
    /**
     * Rejects the $mdDialog promise used to launch this controller.
     */
    /* istanbul ignore next */
    this.cancel = function () {
        $mdDialog.cancel();
    };
    
    /**
     * Resolves the $mdDialog promise with the a configured this.selected_protocol.
     * @returns {$q.defer.promise} Resolves the $mdDialog promise with the a configured $scope.selected_protocol.
     */
    this.connect = function () {        
        this.connecting = true;
        
        ParlayProtocolManager.openProtocol({
            name: this.selected_protocol.name,
            parameters: Object.keys(this.selected_protocol.parameters).reduce(function (param_obj, key) {
	            param_obj[key] = this.selected_protocol.parameters[key].value;
	            return param_obj;
	        }.bind(this), {})
        }).then(function (response) {
            $mdDialog.hide(response);
            return response;
        }).catch(function (response) {
            this.connecting = false;
            this.error = true;
            this.error_message = response.STATUS;
            return response;
        }.bind(this));
    };
    
}

angular.module("parlay.protocols.configuration_controller", ["parlay.protocols.manager", "ngMaterial", "ngMessages", "ngMdIcons", "templates-main"])
	.controller("ParlayProtocolConfigurationController", ["$mdDialog", "ParlayProtocolManager", ParlayProtocolConfigurationController]);