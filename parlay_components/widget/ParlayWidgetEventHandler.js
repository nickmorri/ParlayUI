(function () {
    "use strict";

    var module_dependencies = ["parlay.widget.interpreter.py"];

    angular
        .module("parlay.widget.eventhandler", module_dependencies)
        .factory("ParlayWidgetEventHandler", ParlayWidgetEventHandlerFactory);

    ParlayWidgetEventHandlerFactory.$inject = ["ParlayPyInterpreter"];
    function ParlayWidgetEventHandlerFactory(ParlayPyInterpreter) {

        /**
         * ParlayWidgetEventHandler factory for handling events spawn by <input> and <button> HTMLElements with
         * arbitrary code in a sandboxed JavaScript interpreter.
         * Uses JS-Interpreter internally for code execution.
         * https://github.com/NeilFraser/JS-Interpreter/
         *
         * @constructor module:ParlayWidget.ParlayWidgetEventHandler
         * @attribute {String} functionString - JavaScript code that should be executed on this.run()
         * @attribute {Object} interpreter - JS-Interpreter instance.
         * @attribute {String} constructionError - Initially undefined, if a construction error occurs it will be set
         * error.toString() representation.
         */
        function ParlayWidgetEventHandler () {
            ParlayPyInterpreter.call(this);

            /**
             * Reference to the event container Object.
             * @member module:ParlayWidget.ParlayWidgetEventHandler#eventRef
             * @private
             */
            var eventRef;

            /**
             * Reference to this (ParlayWidgetEventHandler).
             * @member module:ParlayWidget.ParlayWidgetEventHandler#handlerRef
             * @type ParlayWidgetEventHandler
             * @private
             */
            var handlerRef = this;

            // Attach methods to handlerRef.
            handlerRef.attach = attach;
            handlerRef.detach = detach;

            /**
             * Callback that should be invoked when the the domEvent is emitted.
             * @member module:ParlayWidget.ParlayWidgetEventHandler#listenerCallback
             * @private
             * @param {Event} domEvent - Event fired from a HTMLElement.
             */
            function listenerCallback (domEvent) {
                handlerRef.construct(domEvent);
                handlerRef.run();
            }

            /**
             * Connect the ParlayWidgetEventHandler to the event configuration.
             * @member module:ParlayWidget.ParlayWidgetEventHandler#attach
             * @public
             * @param {Object} event - Event configuration Object generated by ParlayWidgetInputManager.
             */
            function attach (event) {
                eventRef = event;
                eventRef.addListener(listenerCallback);
                eventRef.handler = handlerRef;
            }

            /**
             * Disconnects the ParlayWidgetEventHandler from the event configuration.
             * @member module:ParlayWidget.ParlayWidgetEventHandler#detach
             * @public
             */
            function detach () {
                eventRef.removeListener(listenerCallback);
                eventRef.handler = null;
            }
            
        }

        // Prototypically inherit from ParlayPyInterpreter.
        ParlayWidgetEventHandler.prototype = Object.create(ParlayPyInterpreter.prototype);

        /**
         * Construct the parent ParlayPyInterpreter with the initFunc to ensure that domEvent is attached to the
         * JS-Interpreter scope.
         * @member module:ParlayWidget.ParlayWidgetEventHandler#construct
         * @public
         * @param {Event} domEvent - Event fired from a HTMLElement.
         */
        ParlayWidgetEventHandler.prototype.construct = function (domEvent) {
            ParlayPyInterpreter.prototype.construct.call(this, function initFunc(interpreter, scope) {
                this.attachEvent(scope, interpreter, domEvent);//TODO: edit here to expose initial DOM event that triggered script
            });
        };



        /**
         * Converts ParlayWidgetEventHandler instance to Object that can be JSON.strinfified.
         * @member module:ParlayWidget.ParlayWidgetEventHandler#toJSON
         * @public
         * @returns {{functionString: {String}}}
         */
        ParlayWidgetEventHandler.prototype.toJSON = function () {
            return angular.merge({}, ParlayPyInterpreter.prototype.toJSON.call(this));
        };

        return ParlayWidgetEventHandler;
    }

}());