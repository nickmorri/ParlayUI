(function () {
    "use strict";

    var module_dependencies = ["parlay.widget.interpreter"];

    angular
        .module("parlay.widget.eventhandler", module_dependencies)
        .factory("ParlayWidgetEventHandler", ParlayWidgetEventHandlerFactory);

    ParlayWidgetEventHandlerFactory.$inject = ["ParlayInterpreter"];
    function ParlayWidgetEventHandlerFactory(ParlayInterpreter) {

        /**
         * @service
         * @name ParlayWidgetEventHandler
         *
         * @description
         * ParlayWidgetEventHandler factory for handling events spawn by <input> and <button> HTMLElements with
         * arbitrary code in a sandboxed JavaScript interpreter.
         *
         * Uses JS-Interpreter internally for code execution.
         * https://github.com/NeilFraser/JS-Interpreter/
         *
         * @attribute {String} functionString - JavaScript code that should be executed on this.run()
         * @attribute {JS-Interpreter} interpreter - JS-Interpreter instance.
         * @attribute {String} constructionError - Initially undefined, if a construction error occurs it will be set
         * error.toString() representation.
         *
         */

        function ParlayWidgetEventHandler () {
            ParlayInterpreter.call(this);
            
            var eventRef, handlerRef;

            handlerRef = this;

            /**
             * Callback that should be invoked when the the domEvent is emitted.
             * @param {Event} domEvent - Event fired from a HTMLElement.
             */
            function listenerCallback(domEvent) {
                handlerRef.construct(domEvent);
                handlerRef.run();
            }

            /**
             * Connect the ParlayWidgetEventHandler to the event configuration.
             * @param {Object} event - Event configuration Object generated by ParlayWidgetInputManager.
             */
            this.attach = function (event) {
                eventRef = event;
                eventRef.addListener(listenerCallback);
                eventRef.handler = this;
            };

            /**
             * Disconnects the ParlayWidgetEventHandler from the event configuration.
             */
            this.detach = function () {
                eventRef.removeListener(listenerCallback);
                eventRef.handler = null;
            };
            
        }

        // Prototypically inherit from ParlayInterpreter.
        ParlayWidgetEventHandler.prototype = Object.create(ParlayInterpreter.prototype);

        /**
         * Construct the parent ParlayInterpreter with the initFunc to ensure that domEvent is attached to the
         * JS-Interpreter scope.
         * @param {Event} domEvent - Event fired from a HTMLElement.
         */
        ParlayWidgetEventHandler.prototype.construct = function (domEvent) {
            ParlayInterpreter.prototype.construct.call(this, function initFunc(interpreter, scope) {
                this.attachEvent(scope, interpreter, domEvent);
            });
        };

        /**
         * Creates and returns a JS-Interpreter Object that can be attached to a JS-Interpreter scope.
         * @param {JS-Interpreter} interpreter - JS-Interpreter instance that will be used to construct the native Function.
         * @param {Event} domEvent - Event fired from a HTMLElement.
         * @returns {Object} - JS-Interpreter Object that can be attached to a JS-Interpreter scope.
         */
        ParlayWidgetEventHandler.prototype.makeEvent = function (interpreter, domEvent) {
            var evt = this.makeObject(interpreter, domEvent);
            var tag = domEvent.target.tagName.toLowerCase();

            if (tag.includes("input")) {
                var obj = interpreter.createObject();

                var currentTarget = domEvent.target;
                var val = currentTarget.type == "number" ? parseInt(currentTarget.value, 10) : currentTarget.value;
                interpreter.setProperty(obj, "name", interpreter.createPrimitive(currentTarget.name));
                interpreter.setProperty(obj, "type", interpreter.createPrimitive(currentTarget.type));
                interpreter.setProperty(obj, "value", interpreter.createPrimitive(val));
                interpreter.setProperty(evt, "element", obj);
            }

            return evt;
        };

        /**
         * Binds a property on the JS-Interpreter scope to the given domEvent.
         * @param {JS-Interpreter scope} scope - Execution scope that the Object will be attached to.
         * @param {JS-Interpreter} interpreter - JS-Interpreter instance that will be used to attach the Object.
         * @param {Event} domEvent - Event fired from a HTMLElement.
         * @param {String} optionalName - If provided this will be the name used on the scope to reference the domEvent.
         */
        ParlayWidgetEventHandler.prototype.attachEvent = function (scope, interpreter, domEvent, optionalName) {
            var name = !!optionalName ? optionalName : "event";

            if (this.functionString.includes(name)) {
                interpreter.setProperty(scope, name, this.makeEvent(interpreter, domEvent));
            }
        };

        /**
         * Converts ParlayWidgetEventHandler instance to Object that can be JSON.strinfified.
         * @returns {{functionString: {String}}}
         */
        ParlayWidgetEventHandler.prototype.toJSON = function () {
            return angular.merge({}, ParlayInterpreter.prototype.toJSON.call(this));
        };

        return ParlayWidgetEventHandler;
    }

}());