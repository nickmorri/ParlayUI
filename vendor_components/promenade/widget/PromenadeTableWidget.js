(function () {
    "use strict";

    var display_name = "Table";
    var module_dependencies = ["parlay.data"];
    var module_name = "promenade.widget.table";
    var directive_name = "promenadeWidgetTable";
    var wigdet_type = "display";
    var directive_definition = promenadeWidgetTableJs;

    widgetRegistration(display_name, module_name, module_dependencies, directive_name, wigdet_type, directive_definition, []);

    promenadeWidgetTableJs.$inject = ["ParlayWidgetTemplate"];
    function promenadeWidgetTableJs(ParlayWidgetTemplate) {

        function customLink(scope) {

            var headers = scope.customizations.headers.value;
            var data = scope.customizations.data.value;

            scope.headerItems = function headerItems(col) {

                // Fail safe checking for customizations input.  If the value is null
                // or zero, the table size should not auto adjust until the user
                // speicifies the dimensions of the table
                if (col === null || col === 0)
                    return headers;

                // Add the appropriate amount of columns to the header portion
                // of the table
                for (var i = 0; i < col - headers.length; ++i)
                    headers.push({value: "", index: headers.length});

                // Remove the appropriate amount of columns to the header 
                // portion of the table
                for (var j = 0; j < headers.length - col; ++j)
                    headers.pop();

                return headers;
            };


            scope.tableData = function tableData(row, col) {

                // Fail safe checking for customizations input.  If the value is null
                // or zero, the table size should not auto adjust until the user
                // speicifies the dimensions of the table
                if (row === null || row === 0 || col === null || col === 0)
                    return data;


                // Protections on input size. If the user attempts to set a size of 0 or
                // less the row and col count will reset back to one.  Becuase both the
                // header and and table data are generated by scope.customizations.columns.value,
                // these fail safes will protect both this function and the scope.headerItems()
                // function
                if (row < 1) scope.customizations.rows.value = 1;
                if (col < 1) scope.customizations.columns.value = 1;

                // add/subtract rows from table 
                var rowsToAdd = row - data.length;
                var rowsToSub = data.length - row;

                // Add rows with empty columns to the data table
                for (var x = 0; x < rowsToAdd; ++x) {
                    data.push([]);
                    for (var y = 0; y < col; ++y) {
                        data[data.length - 1].push({value: "", index: data[data.length - 1].length});
                    }
                }

                // remove rows from the data table that are no longer needed
                for (var z = 0; z < rowsToSub; ++z)
                    data.pop();

                // add/subtract columns to every row 
                for (var i = 0; i < data.length; ++i) {
                    var colsToAdd = col - data[i].length;
                    var colsToSub = data[i].length - col;

                    for (var j = 0; j < colsToAdd; ++j)
                        data[i].push({value: "", index: data[i].length});

                    for (var k = 0; k < colsToSub; ++k)
                        data[i].pop();
                }

                return data;
            };
        }

        return new ParlayWidgetTemplate({
            title: "Check List",
            templateUrl: "../vendor_components/promenade/widget/directives/promenade-widget-table.html",
            customLink: customLink,
            customizationDefaults: {
                rows: {
                    property_name: "Table Rows",
                    value: 1,
                    type: "number"
                },
                columns: {
                    property_name: "Table Columns",
                    value: 1,
                    type: "number"
                },
                edit: {
                    property_name: "Disable Edits",
                    value: false,
                    type: "checkbox"
                },
                headers: {
                    hidden: true,
                    value: []
                },
                data: {
                    hidden: true,
                    value: [] // should be 2D array
                }
            }
        }, display_name);
    }
}());